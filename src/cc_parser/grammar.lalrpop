use crate::cc_lexer;
use crate::vm::error::ErrorS;
use crate::cc_lexer::Token;
use crate::cc_parser::ast::Expression;
use crate::cc_parser::ast;
use hashbrown::HashMap;
use crate::cc_parser::ast::Fn;
use lalrpop_util::ParseError;

grammar<'err>(
    errors: &'err mut Vec<ParseError<usize, cc_lexer::Token, ErrorS>>
);

Spanned<T>: ast::Spanned<T> = <l:@L> <t:T> <r:@R> => (t, l..r);

pub Program: ast::Program = <statements:DeclS*> => ast::Program { <> };


DeclS = Spanned<Decl>;
Decl = {
    Stmt,
    DeclVar,
    DeclFun,
    DeclStruct,
    DeclImpl,
}

DeclImpl: ast::Statement = 
   "impl" <name:identifier> <super_:("<" <Spanned<ExprVar>>)?> "{" <methods:Spanned<DeclFun>*> "}" => 
        ast::Statement::Impl(ast::StatementImpl { <> });


DeclStruct: ast::Statement = {
  "struct" <name:identifier> "{" <fields:StructFields> "}"  => 
    ast::Statement::Struct(ast::StatementStruct { <> })
}


StructFields: Vec<ast::Field> = {
    <first:SingleField> <mut fields:("," <SingleField>)*>  => {
      fields.insert(0, first);
      fields
    },
    () => Vec::new(),
}

SingleField: ast::Field = {
  <name:identifier> ":" <type_:Types> =>
    ast::Field { <> }
}


DeclFun: ast::Statement = "fn" <function:Function> => ast::Statement::Fun(<>);

DeclVar: ast::Statement = "let" <name:identifier> <type_:(":" <Types>)?> <value:("=" <ExprS>)?> ";" =>
  ast::Statement::Var(ast::StatementVar {
        var: ast::Var { name, type_: type_ },
        value,
      });


Stmt: ast::Statement = {
 StmtOpen,
 StmtClosed,
    <e:!> => {
        errors.push(e.error);
        ast::Statement::Error
    },
}


StmtOpen: ast::Statement = {

    "if" "(" <cond:ExprS> ")" <then_branch:Spanned<Stmt>> =>
        ast::Statement::If(Box::new(ast::StatementIf { <>, else_branch: None })),

    "if" "(" <cond:ExprS> ")" <then_branch:Spanned<StmtClosed>> "else" <else_branch:Spanned<StmtOpen>> =>
        ast::Statement::If(Box::new(ast::StatementIf { cond, then_branch, else_branch: Some(else_branch)})),

    "for" "(" <init:ForInit> <cond:ForCond> <update:ForIncr> ")" <body:Spanned<StmtOpen>> =>
        ast::Statement::For(Box::new(ast::StatementFor { <> })),

    "while" "(" <cond:ExprS> ")" <body:Spanned<StmtOpen>> =>
        ast::Statement::While(Box::new(ast::StatementWhile { <> })),


}

StmtClosed: ast::Statement = {
    "if" "(" <cond:ExprS> ")" <then_branch:Spanned<StmtClosed>> "else" <else_branch:Spanned<StmtClosed>> =>
        ast::Statement::If(Box::new(ast::StatementIf { cond, then_branch, else_branch: Some(else_branch) })),
    "while" "(" <cond:ExprS> ")" <body:Spanned<StmtClosed>> =>
        ast::Statement::While(Box::new(ast::StatementWhile { <> })),
    "for" "(" <init:ForInit> <cond:ForCond> <update:ForIncr> ")" <body:Spanned<StmtClosed>> =>
        ast::Statement::For(Box::new(ast::StatementFor { <> })),
    SmallStmt,
}

ForInit: Option<ast::StatementS> = {
    <Spanned<DeclVar>> => Some(<>),
    <Spanned<StmtExpr>> => Some(<>),
    ";" => None,
}

ForCond = <ExprS?> ";";

ForIncr = <ExprS?>;

Function: ast::StatementFun =
    <name:identifier>  "("  <params:Params> ")" <return_type:("->" <Types>)?>  <body:StatementBlockIn> =>
        ast::StatementFun { <> };

Params: Vec<(String, Option<ast::Type>)> = {
    <first:Param> <mut params:("," <Param>)*> => {
        params.insert(0, first);
        params
    },
    () => Vec::new(),
}



Param: (String, Option<ast::Type>) = {
  <string_:identifier> <type_:(":" <Types>)?> =>
    (string_,type_)
}



SmallStmt = {
    StmtExpr,
    StmtBlock,
    StmtPrint,
    StmtPrintLn,
    StmtReturn,
}



StmtReturn: ast::Statement = "return" <value:ExprS?> ";" =>
  ast::Statement::Return(ast::StatementReturn { <> });

StmtPrintLn: ast::Statement = "println" <value:ExprS> ";" =>
  ast::Statement::PrintLn(ast::StatementPrintLn { <> });


StmtPrint: ast::Statement = "print" <value:ExprS> ";" =>
  ast::Statement::Print(ast::StatementPrint { <> });

StmtBlock: ast::Statement = StatementBlockIn => ast::Statement::Block(<>);

StatementBlockIn: ast::StatementBlock = "{" <statements:DeclS*> "}" =>
  ast::StatementBlock { <> };

StmtExpr: ast::Statement = <expr:ExprS> ";" =>
    ast::Statement::Expression(ast::StatementExpr { <> });


ExprS = Spanned<Expression>;

Expression = ExprAssign;

ExprAssign = {
    <name:identifier> "=" <value:ExprS> =>
        ast::Expression::Assign(Box::new(ast::ExprAssign {
            lhs: ast::Var { name, type_: None },
            rhs: value,
        })),
        <object:Spanned<ExprCall>> "." <name:identifier> "=" <value:ExprS> =>
        ast::Expression::Set(Box::new(ast::ExprSet { <> })),


    ExprLogicOr,
}

ExprLogicOr = ExprInfix<ExprLogicOr, OpLogicOr, ExprLogicAnd>;
OpLogicOr: ast::OpInfix = "or" => ast::OpInfix::LogicOr;


ExprLogicAnd = ExprInfix<ExprLogicAnd, OpLogicAnd, ExprEquality>;
OpLogicAnd: ast::OpInfix = "and" => ast::OpInfix::LogicAnd;

ExprEquality = ExprInfix<ExprEquality, OpEquality, ExprComparison>;
OpEquality: ast::OpInfix = {
    "==" => ast::OpInfix::Equal,
    "!=" => ast::OpInfix::NotEqual,
}

ExprComparison = ExprInfix<ExprComparison, OpComparison, ExprTerm>;
OpComparison: ast::OpInfix = {
    ">" => ast::OpInfix::Greater,
    ">=" => ast::OpInfix::GreaterEqual,
    "<" => ast::OpInfix::Less,
    "<=" => ast::OpInfix::LessEqual,
}

ExprTerm = ExprInfix<ExprTerm, OpTerm, ExprFactor>;
OpTerm: ast::OpInfix = {
    "+" => ast::OpInfix::Add,
    "-" => ast::OpInfix::Sub,
}

ExprFactor = ExprInfix<ExprFactor, OpFactor, ExprPrefix>;
OpFactor: ast::OpInfix = {
    "*" => ast::OpInfix::Mul,
    "/" => ast::OpInfix::Div,
    "%" => ast::OpInfix::Modulo,
}


pub OpPrefix: ast::OpPrefix = {
  "-" => ast::OpPrefix::Negate,
  "!" => ast::OpPrefix::Not,  
}

ExprPrefix: ast::Expression = {
    <op:OpPrefix> <rt:Spanned<ExprPrefix>> =>
        ast::Expression::Prefix(Box::new(ast::ExprPrefix { <> })),
    ExprCall,
}

ExprCall: ast::Expression = {
    <array:Spanned<ExprCall>> "[" <index:ExprS> "]" =>
      ast::Expression::ArrayAccess(Box::new(ast::ExprArrayAccess { <> })),

    <callee:Spanned<ExprCall>> "(" <args:Args> ")" =>
      ast::Expression::Call(Box::new(ast::ExprCall { callee, args })),
    <object:Spanned<ExprCall>> "." <name:identifier> =>
        ast::Expression::Get(Box::new(ast::ExprGet { <> })),
    "super" "." <name:identifier> =>
        ast::Expression::Super(ast::ExprSuper {
            super_: ast::Var {
                name: "super".to_string(),
                type_: None,
            },
            name,
        }),
      ExprPrimary
}

ExprPrimary: ast::Expression = {
    // Literals
    "nil" => ast::Expression::Literal(ast::ExprLiteral::Nil),
    "false" => ast::Expression::Literal(ast::ExprLiteral::Bool(false)),
    "true" => ast::Expression::Literal(ast::ExprLiteral::Bool(true)),
    string => ast::Expression::Literal(ast::ExprLiteral::String(<>)),
    number => ast::Expression::Literal(ast::ExprLiteral::Number(<>)),

    //Array
    ExprArray,

    
    // Variables
    ExprVar,
    ExprSelf,

    // Grouping
    "(" <Expression> ")",
}

ExprArray: ast::Expression = {
   "[" <arr:Array> "]" => 
        ast::Expression::Array(Box::new(ast::ExprArray { elements:arr } ))
} 

Array: Vec<ast::ExprS> = {
    <first:ExprS> <mut arr:("," <ExprS>)*> => {
        arr.insert(0, first);
        arr 
    },
    () => Vec::new(),
}


Args: Vec<ast::ExprS> = {
    <first:ExprS> <mut args:("," <ExprS>)*> => {
        args.insert(0, first);
        args
    },
    () => Vec::new(),
}

Types: ast::Type = {
  type_string => ast::Type::String,
  type_int => ast::Type::Int,
  type_bool => ast::Type::Bool,
  "fn" => ast::Type::Fn(ast::Fn { return_type: Box::new(None) }),
  <name:identifier> => ast::Type::Struct(name),
  ArrayType
}

ArrayType: ast::Type = {
    "Vec" "<" <type_:Types> ">" =>
        ast::Type::Array(Box::new(type_))
}


ExprVar: ast::Expression = <name:identifier> =>
  ast::Expression::Var(ast::ExprVar { var: ast::Var {name, type_: None} });

ExprSelf: ast::Expression = "self" => ast::Expression::Var(ast::ExprVar { var: ast::Var {
    name: "self".to_string(),
    type_: None,
}});




ExprInfix<Lhs, Op, Rhs>: ast::Expression =  {
  <lhs:Spanned<Lhs>> <op:Op> <rhs:Spanned<Rhs>> =>
  ast::Expression::Infix(Box::new(ast::ExprInfix { <> })),
  Rhs,
}

extern {
  type Location = usize;
  type Error = ErrorS;

  enum Token {
    // Keywords
    "let" => Token::Let,
    "and" => Token::And,
    "struct" => Token::Struct,
    "print" => Token::Print,
    "println" => Token::PrintLn,
    "if" => Token::If,
    "else" => Token::Else,
    "for" => Token::For,
    "while" => Token::While,
    "return" => Token::Return,
    "true" => Token::True,
    "false" => Token::False,
    "nil" => Token::Nil,
    "or" => Token::Or,
    "fn" => Token::Fn,
    "impl" => Token::Impl,
    "self" => Token::Self_,
    "super" => Token::Super,
    "Vec" => Token::TypeVec,

    // Literals
    string => Token::String(<String>),
    identifier => Token::Identifier(<String>),
    number => Token::Number(<f64>),

    type_string => Token::TypeString,
    type_int => Token::TypeInt,
    type_bool => Token::TypeBool,

    // Punctuation
    "->" => Token::Arrow,
    "%" => Token::Percent,
    "(" => Token::LeftParen,
    ")" => Token::RightParen,
    "{" => Token::LeftBrace,
    "}" => Token::RightBrace,
    "[" => Token::LeftBracket,
    "]" => Token::RightBracket,
    "=" => Token::Equal,
    ";" => Token::Semicolon,
    ":" => Token::Colon,
    "+" => Token::Plus,
    "-" => Token::Minus,
    "*" => Token::Star,
    "/" => Token::Slash,
    "==" => Token::EqualEqual,
    ">" => Token::Greater,
    ">=" => Token::GreaterEqual,
    "<" => Token::Less,
    "<=" => Token::LessEqual,
    "!" => Token::Bang,
    "!=" => Token::BangEqual,
    "," => Token::Comma,
    "." => Token::Dot,
  }
}
